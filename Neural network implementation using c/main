#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>

#define INPUT_NODES 2
#define HIDDEN_NODES 4
#define OUTPUT_NODES 1
#define LEARNING_RATE 0.1
#define EPOCHS 10
#define MAX_SAMPLES 100

// Neural network parameters
double input_weights[INPUT_NODES][HIDDEN_NODES];
double hidden_weights[HIDDEN_NODES][OUTPUT_NODES];
double hidden_bias[HIDDEN_NODES];
double output_bias[OUTPUT_NODES];

// Dataset storage
double height[MAX_SAMPLES], weight[MAX_SAMPLES], diabetes[MAX_SAMPLES];
int num_samples = 0;

// Activation function (Sigmoid)
double sigmoid(double x) {
    return 1.0 / (1.0 + exp(-x));
}

// Derivative of the sigmoid function
double sigmoid_derivative(double x) {
    return x * (1.0 - x);
}

// Initialize weights and biases randomly
void initialize_weights() {
    srand(time(NULL));
    for (int i = 0; i < INPUT_NODES; i++) {
        for (int j = 0; j < HIDDEN_NODES; j++) {
            input_weights[i][j] = ((double)rand() / RAND_MAX) * 2 - 1;
        }
    }
    for (int i = 0; i < HIDDEN_NODES; i++) {
        for (int j = 0; j < OUTPUT_NODES; j++) {
            hidden_weights[i][j] = ((double)rand() / RAND_MAX) * 2 - 1;
        }
        hidden_bias[i] = ((double)rand() / RAND_MAX) * 2 - 1;
    }
    for (int i = 0; i < OUTPUT_NODES; i++) {
        output_bias[i] = ((double)rand() / RAND_MAX) * 2 - 1;
    }
}

// Forward propagation
void forward_propagation(double input[INPUT_NODES], double hidden[HIDDEN_NODES], double output[OUTPUT_NODES]) {
    for (int i = 0; i < HIDDEN_NODES; i++) {
        hidden[i] = hidden_bias[i];
        for (int j = 0; j < INPUT_NODES; j++) {
            hidden[i] += input[j] * input_weights[j][i];
        }
        hidden[i] = sigmoid(hidden[i]);
    }
    for (int i = 0; i < OUTPUT_NODES; i++) {
        output[i] = output_bias[i];
        for (int j = 0; j < HIDDEN_NODES; j++) {
            output[i] += hidden[j] * hidden_weights[j][i];
        }
        output[i] = sigmoid(output[i]);
    }
}

// Training with backpropagation
void train(double input[INPUT_NODES], double target[OUTPUT_NODES]) {
    double hidden[HIDDEN_NODES], output[OUTPUT_NODES];
    forward_propagation(input, hidden, output);

    // Calculate output error and delta
    double output_delta[OUTPUT_NODES];
    for (int i = 0; i < OUTPUT_NODES; i++) {
        double error = target[i] - output[i];
        output_delta[i] = error * sigmoid_derivative(output[i]);
    }

    // Calculate hidden layer error and delta
    double hidden_delta[HIDDEN_NODES];
    for (int i = 0; i < HIDDEN_NODES; i++) {
        double error = 0.0;
        for (int j = 0; j < OUTPUT_NODES; j++) {
            error += output_delta[j] * hidden_weights[i][j];
        }
        hidden_delta[i] = error * sigmoid_derivative(hidden[i]);
    }

    // Update hidden to output weights
    for (int i = 0; i < HIDDEN_NODES; i++) {
        for (int j = 0; j < OUTPUT_NODES; j++) {
            hidden_weights[i][j] += LEARNING_RATE * output_delta[j] * hidden[i];
        }
    }

    // Update output biases
    for (int i = 0; i < OUTPUT_NODES; i++) {
        output_bias[i] += LEARNING_RATE * output_delta[i];
    }

    // Update input to hidden weights
    for (int i = 0; i < INPUT_NODES; i++) {
        for (int j = 0; j < HIDDEN_NODES; j++) {
            input_weights[i][j] += LEARNING_RATE * hidden_delta[j] * input[i];
        }
    }

    // Update hidden biases
    for (int i = 0; i < HIDDEN_NODES; i++) {
        hidden_bias[i] += LEARNING_RATE * hidden_delta[i];
    }
}

// Load dataset from CSV file
int load_data(const char *filename) {
    FILE *file = fopen(filename, "r");
    if (!file) {
        printf("Could not open file %s\n", filename);
        return -1;
    }
    while (fscanf(file, "%lf,%lf,%lf", &height[num_samples], &weight[num_samples], &diabetes[num_samples]) == 3) {
        num_samples++;
        if (num_samples >= MAX_SAMPLES) break;
    }
    fclose(file);
    return 0;
}

// Train the network on all samples
void train_network() {
    double input[INPUT_NODES];
    double target[OUTPUT_NODES];
    for (int epoch = 0; epoch < EPOCHS; epoch++) {
        for (int i = 0; i < num_samples; i++) {
            input[0] = height[i];
            input[1] = weight[i];
            target[0] = diabetes[i];
            train(input, target);
        }
    }
}

// Predict diabetes status
void predict(double input[INPUT_NODES]) {
    double hidden[HIDDEN_NODES], output[OUTPUT_NODES];
    forward_propagation(input, hidden, output);
    printf("Prediction (0: Non-diabetic, 1: Diabetic): %f\n", output[0]);
}

int main() {
    initialize_weights();

    // Load the dataset
    if (load_data("diabetes_data.csv") != 0) {
        return 1;
    }

    // Train the network
    train_network();

    // Test the network with a sample input
    double input[INPUT_NODES] = {170, 65}; // example height and weight
    predict(input);

    return 0;
}
